@isTest
public class QAMenuControlTest {
    
    @testSetup
    static void setup(){
        
        //Every Test will use fields from a Training object. Don't have to name them because names are autogenerated.
        List<Training__c> testTraining = new List<Training__c>();
        Training__c testtraining1 = new Training__c();
        Training__c testTraining2 = new Training__c();
        Training__c testTraining3 = new Training__c();
        Training__c testTraining4 = new Training__c();
        //Assign the proper values for fields within the Training object.
        
        if(testTraining == NULL){
		
		testTraining[0].Caliber_Number_of_Weeks__c = 5;
        testTraining[0].StartDate__c = Date.newInstance(2019, 2, 1); //Sets for January 2, 2019.
        testTraining[0].EndDate__c = Date.newInstance(2019, 2, 12);            
        }
     
     	
        testTraining1.Caliber_Number_of_Weeks__c = 5;
        testTraining1.StartDate__c = Date.newInstance(2019, 2, 1); //Sets for January 2, 2019.
        testTraining1.EndDate__c = Date.newInstance(2019, 2, 12);
        testTraining1.Trainer__c = userInfo.getUserId();
        
        testTraining2.Caliber_Number_of_Weeks__c = 5;
        testTraining2.StartDate__c = Date.newInstance(2019, 4, 2); 
        testTraining2.EndDate__c = Date.newInstance(2019, 5, 1);
        testTraining2.Trainer__c = userInfo.getUserId();
        
        testTraining3.Caliber_Number_of_Weeks__c = 5;
        testTraining3.StartDate__c = Date.newInstance(2019, 7, 2); 
        testTraining3.EndDate__c = Date.newInstance(2019, 8, 1);
        testTraining3.Trainer__c = userInfo.getUserId();
        
        testTraining4.Caliber_Number_of_Weeks__c = 5;
        testTraining4.StartDate__c = Date.newInstance(2019, 10, 2); 
        testTraining4.EndDate__c = Date.newInstance(2019, 11, 1);
        testTraining4.Trainer__c = userInfo.getUserId();
        
    	//Plugs in the Training Object for testing.
    	
        testTraining.add(testTraining1);
        testTraining.add(testTraining2);
        testTraining.add(testTraining3);
        testTraining.add(testTraining4);
        
        
        
    	system.debug(testTraining);
        
        insert testTraining;
        
    }
    
    @isTest
    static void testQAControllerMethods(){
         
        User Me = New User(id=userInfo.getUserId());
        
        System.runAs(Me){
        List<Integer> yearList = QAController.GetAllYearsWithBatches();
        
        system.assert(yearList[0]==2019);
        
        List<String> allQuartersTest = QAController.getAllQuarters(yearList[0]);
        
        System.assert(allQuartersTest[0]=='Q1'); 
        System.assert(allQuartersTest[1]=='Q2');
        System.assert(allQuartersTest[2]=='Q3');
        System.assert(allQuartersTest[3]=='Q4');
        
        List<String> allLocations = QAController.getLocations(allQuartersTest[0], yearList[0]);
        List<String> allLocations1 = QAController.getLocations(allQuartersTest[1], yearList[0]);
        List<String> allLocations2 = QAController.getLocations(allQuartersTest[2], yearList[0]);
        List<String> allLocations3 = QAController.getLocations(allQuartersTest[3], yearList[0]);
        //come up with assert. Maybe.
       	
        System.assert(allLocations.size() == 1);
        System.assert(allLocations1.size() == 1);
        System.assert(allLocations2.size() == 1);
        System.assert(allLocations3.size() == 1);
        
        List<Training__c> allTrainings = QAController.getBatchesByYear(yearList[0], allQuartersTest[0], allLocations[0]);
        List<Training__c> allTrainings1 = QAController.getBatchesByYear(yearList[0], allQuartersTest[1], allLocations1[0]);
        List<Training__c> allTrainings2 = QAController.getBatchesByYear(yearList[0], allQuartersTest[2], allLocations2[0]);
        List<Training__c> allTrainings3 = QAController.getBatchesByYear(yearList[0], allQuartersTest[3], allLocations3[0]);
       	
        System.assert(allTrainings.size() == 1);
        System.assert(allTrainings1.size() == 1);
        System.assert(allTrainings2.size() == 1);
        System.assert(allTrainings3.size() == 1);
        
        List<String> testBatches = QAController.buildBatchStrings(allTrainings);
            System.debug('all batch strings = '+allTrainings);
            System.debug('testBatch size= '+testBatches.size());
        
        System.assert(testBatches.size() == 1);
        }
        
        
    }
    
    @isTest
    static void testfindCurrentBatch(){
        training__c currentTraining = [SELECT id FROM training__c ORDER BY startdate__c DESC LIMIT 1];
        String trainingValue = currentTraining.id;
        training__c queriedTraining = QAController.findCurrentBatch(trainingValue);
        System.assertEquals(Date.newInstance(2019, 10, 2),queriedTraining.StartDate__c);
    }

}